import { Common } from './acs-bluetooth.common';
import { BehaviorSubject, Observable } from "rxjs";
import { NgZone } from "@angular/core";
export declare class ACSBluetooth extends Common {
    private angularZone;
    private BluetoothGatt;
    private BluetoothProfile;
    private BluetoothReader;
    private BluetoothReaderGattCallback;
    private BluetoothReaderManager;
    private OnReaderDetectionListener;
    private OnConnectionStateChangeListener;
    private readerState;
    private bluetoothErrors;
    private readerManager;
    private gattCallback;
    private reader;
    private device;
    private gatt;
    private adapter;
    private scanning;
    private scanResults;
    private readerConnnected;
    private cardUid;
    private cback;
    private scanForDevicesCallback;
    constructor(angularZone: NgZone);
    startScanningForDevices(): void;
    stopScanningForDevices(): void;
    isPermissionGranted(): boolean;
    requestCoarseLocationPermission(): any;
    scanningObservable(): Observable<boolean>;
    isScanning(): BehaviorSubject<boolean>;
    isReaderConnnected(): Observable<boolean>;
    getCardUid(): Observable<string>;
    scanResultsObservable(): Observable<android.bluetooth.BluetoothDevice[]>;
    private onReaderDetection(detectedReader);
    createBluetoothReaderGattCallback(): any;
    getGattCallback(): any;
    connect(updatedDeviceDetails: any): boolean;
    disconnect(): void;
    private createOnConnectionStateChangeListener;
    private createOnCardStatusChangeListener;
    private createOnEnableNotificationCompleteListener;
    private createOnAuthenticationCompleteListener;
    private createOnResponseApduAvailableListener;
    private createOnEscapeResponseAvailableListener;
    authenticate(): void;
    startPolling(): void;
    stopPolling(): void;
    disableSleep(): void;
    requestUid(): void;
    getResponseString(response: any, errorCode: any): string;
    hex2Bytes(hexStr: any): any[];
    toHexString(attr: any): string;
}
